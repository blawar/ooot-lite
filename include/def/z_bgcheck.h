#pragma once
#ifdef INTERNAL_SRC_CODE_Z_BGCHECK_C
void BgCheck_Allocate(CollisionContext* colCtx, GlobalContext* globalCtx, CollisionHeader* colHeader);
s32 BgCheck_AnyCheckCeiling(CollisionContext* colCtx, f32* outY, Vec3f* pos, f32 checkHeight);
s32 BgCheck_AnyLineTest1(CollisionContext* colCtx, Vec3f* posA, Vec3f* posB, Vec3f* posResult, CollisionPoly** outPoly, s32 chkOneFace);
s32 BgCheck_AnyLineTest2(CollisionContext* colCtx, Vec3f* posA, Vec3f* posB, Vec3f* posResult, CollisionPoly** outPoly, s32 chkWall, s32 chkFloor, s32 chkCeil, s32 chkOneFace);
s32 BgCheck_AnyLineTest3(CollisionContext* colCtx, Vec3f* posA, Vec3f* posB, Vec3f* posResult, CollisionPoly** outPoly, s32 chkWall, s32 chkFloor, s32 chkCeil, s32 chkOneFace, s32* bgId);
f32 BgCheck_AnyRaycastFloor1(CollisionContext* colCtx, CollisionPoly* outPoly, Vec3f* pos);
f32 BgCheck_AnyRaycastFloor2(CollisionContext* colCtx, CollisionPoly* outPoly, s32* bgId, Vec3f* pos);
s32 BgCheck_CameraLineTest1(CollisionContext* colCtx, Vec3f* posA, Vec3f* posB, Vec3f* posResult, CollisionPoly** outPoly, s32 chkWall, s32 chkFloor, s32 chkCeil, s32 chkOneFace, s32* bgId);
s32 BgCheck_CameraLineTest2(CollisionContext* colCtx, Vec3f* posA, Vec3f* posB, Vec3f* posResult, CollisionPoly** outPoly, s32 chkWall, s32 chkFloor, s32 chkCeil, s32 chkOneFace, s32* bgId);
f32 BgCheck_CameraRaycastFloor2(CollisionContext* colCtx, CollisionPoly** outPoly, s32* bgId, Vec3f* pos);
s32 BgCheck_CheckDynaCeiling(CollisionContext* colCtx, u16 xpFlags, f32* outY, Vec3f* pos, f32 chkDist, CollisionPoly** outPoly, s32* outBgId, Actor* actor);
s32 BgCheck_CheckLineAgainstDyna(CollisionContext* colCtx, u16 xpFlags, Vec3f* posA, Vec3f* posB, Vec3f* posResult, CollisionPoly** outPoly, f32* distSq, s32* outBgId, Actor* actor, f32 chkDist, s32 bccFlags);
s32 BgCheck_CheckLineAgainstSSList(SSList* headNodeId, CollisionContext* colCtx, u16 xpFlags1, u16 xpFlags2, Vec3f* posA, Vec3f* posB, Vec3f* outPos, CollisionPoly** outPoly, f32* outDistSq, f32 chkDist, s32 bccFlags);
s32 BgCheck_CheckLineImpl(CollisionContext* colCtx, u16 xpFlags1, u16 xpFlags2, Vec3f* posA, Vec3f* posB, Vec3f* posResult, CollisionPoly** outPoly, s32* bgId, Actor* actor, f32 chkDist, u32 bccFlags);
s32 BgCheck_CheckStaticCeiling(StaticLookup* lookup, u16 xpFlags, CollisionContext* colCtx, f32* outY, Vec3f* pos, f32 checkHeight, CollisionPoly** outPoly);
s32 BgCheck_CheckWallImpl(CollisionContext* colCtx, u16 xpFlags, Vec3f* posResult, Vec3f* posNext, Vec3f* posPrev, f32 radius, CollisionPoly** outPoly, s32* outBgId, Actor* actor, f32 checkHeight, u8 argA);
void BgCheck_DrawDynaCollision(GlobalContext*, CollisionContext*);
void BgCheck_DrawStaticCollision(GlobalContext*, CollisionContext*);
s32 BgCheck_EntityCheckCeiling(CollisionContext* colCtx, f32* arg1, Vec3f* arg2, f32 arg3, CollisionPoly** outPoly, s32* outBgId, Actor* actor);
s32 BgCheck_EntityLineTest1(CollisionContext* colCtx, Vec3f* posA, Vec3f* posB, Vec3f* posResult, CollisionPoly** outPoly, s32 chkWall, s32 chkFloor, s32 chkCeil, s32 chkOneFace, s32* bgId);
s32 BgCheck_EntityLineTest2(CollisionContext* colCtx, Vec3f* posA, Vec3f* posB, Vec3f* posResult, CollisionPoly** outPoly, s32 chkWall, s32 chkFloor, s32 chkCeil, s32 chkOneFace, s32* bgId, Actor* actor);
s32 BgCheck_EntityLineTest3(CollisionContext* colCtx, Vec3f* posA, Vec3f* posB, Vec3f* posResult, CollisionPoly** outPoly, s32 chkWall, s32 chkFloor, s32 chkCeil, s32 chkOneFace, s32* bgId, Actor* actor, f32 chkDist);
f32 BgCheck_EntityRaycastFloor1(CollisionContext* colCtx, CollisionPoly** outPoly, Vec3f* pos);
f32 BgCheck_EntityRaycastFloor2(GlobalContext* globalCtx, CollisionContext* colCtx, CollisionPoly** outPoly, Vec3f* pos);
f32 BgCheck_EntityRaycastFloor3(CollisionContext* colCtx, CollisionPoly** outPoly, s32* bgId, Vec3f* pos);
f32 BgCheck_EntityRaycastFloor4(CollisionContext* colCtx, CollisionPoly** outPoly, s32* bgId, Actor* actor, Vec3f* arg4);
f32 BgCheck_EntityRaycastFloor5(GlobalContext* globalCtx, CollisionContext* colCtx, CollisionPoly** outPoly, s32* bgId, Actor* actor, Vec3f* pos);
f32 BgCheck_EntityRaycastFloor6(CollisionContext* colCtx, CollisionPoly** outPoly, s32* bgId, Actor* actor, Vec3f* pos, f32 chkDist);
f32 BgCheck_EntityRaycastFloor7(CollisionContext* colCtx, CollisionPoly** outPoly, s32* bgId, Actor* actor, Vec3f* pos);
f32 BgCheck_EntityRaycastFloor8(CollisionContext* colCtx, CollisionPoly** outPoly, s32* bgId, Actor* actor, Vec3f* pos);
f32 BgCheck_EntityRaycastFloor9(CollisionContext* colCtx, CollisionPoly** outPoly, s32* bgId, Vec3f* pos);
s32 BgCheck_EntitySphVsWall1(CollisionContext* colCtx, Vec3f* posResult, Vec3f* posNext, Vec3f* posPrev, f32 radius, CollisionPoly** outPoly, f32 checkHeight);
s32 BgCheck_EntitySphVsWall2(CollisionContext* colCtx, Vec3f* posResult, Vec3f* posNext, Vec3f* posPrev, f32 radius, CollisionPoly** outPoly, s32* outBgId, f32 checkHeight);
s32 BgCheck_EntitySphVsWall3(CollisionContext* colCtx, Vec3f* posResult, Vec3f* posNext, Vec3f* posPrev, f32 radius, CollisionPoly** outPoly, s32* outBgId, Actor* actor, f32 checkHeight);
s32 BgCheck_EntitySphVsWall4(CollisionContext* colCtx, Vec3f* posResult, Vec3f* posNext, Vec3f* posPrev, f32 radius, CollisionPoly** outPoly, s32* outBgId, Actor* actor, f32 checkHeight);
void BgCheck_GetStaticLookupIndicesFromPos(CollisionContext* colCtx, Vec3f* pos, Vec3i* arg2);
s32 BgCheck_PosInStaticBoundingBox(CollisionContext* colCtx, Vec3f* pos);
s32 BgCheck_ProjectileLineTest(CollisionContext* colCtx, Vec3f* posA, Vec3f* posB, Vec3f* posResult, CollisionPoly** outPoly, s32 chkWall, s32 chkFloor, s32 chkCeil, s32 chkOneFace, s32* bgId);
f32 BgCheck_RaycastFloorDyna(DynaRaycast* dynaRaycast);
void BgCheck_ResetPolyCheckTbl(SSNodeList* nodeList, s32 numPolys);
s32 BgCheck_SphVsDynaWall(CollisionContext* colCtx, u16 xpFlags, f32* outX, f32* outZ, Vec3f* pos, f32 radius, CollisionPoly** outPoly, s32* outBgId, Actor* actor);
s32 BgCheck_SphVsFirstDynaPoly(CollisionContext* colCtx, u16 xpFlags, CollisionPoly** outPoly, s32* outBgId, Vec3f* center, f32 radius, Actor* actor, u16 bciFlags);
s32 BgCheck_SphVsFirstPoly(CollisionContext* colCtx, Vec3f* center, f32 radius);
void CollisionHeader_GetVirtual(void* colHeader, CollisionHeader** dest);
f32 CollisionPoly_GetPointDistanceFromPlane(CollisionPoly* poly, Vec3f* point);
void CollisionPoly_GetVerticesByBgId(CollisionPoly* poly, s32 bgId, CollisionContext* colCtx, Vec3f* dest);
void DynaPoly_Alloc(GlobalContext* globalCtx, DynaCollisionContext* dyna);
void DynaPoly_DeleteBgActor(GlobalContext* globalCtx, DynaCollisionContext* dyna, s32 bgId);
DynaPolyActor* DynaPoly_GetActor(CollisionContext* colCtx, s32 bgId);
void DynaPoly_Init(GlobalContext* globalCtx, DynaCollisionContext* dyna);
s32 DynaPoly_IsBgIdBgActor(s32 bgId);
s32 DynaPoly_SetBgActor(GlobalContext* globalCtx, DynaCollisionContext* dyna, Actor* actor, CollisionHeader* colHeader);
void DynaPoly_Setup(GlobalContext* globalCtx, DynaCollisionContext* dyna);
void DynaPoly_UpdateBgActorTransforms(GlobalContext* globalCtx, DynaCollisionContext* dyna);
u16 DynaSSNodeList_GetNextNodeIdx(DynaSSNodeList*);
void SSNodeList_Alloc(GlobalContext* globalCtx, SSNodeList* this, s32 tblMax, s32 numPolys);
u16 SSNodeList_GetNextNodeIdx(SSNodeList* this);
void SSNodeList_Initialize(SSNodeList*);
u32 SurfaceType_GetCamDataIndex(CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
Vec3s* SurfaceType_GetCamPosData(CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
u16 SurfaceType_GetCameraSType(CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
u32 SurfaceType_GetConveyorDirection(CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
u32 SurfaceType_GetConveyorSpeed(CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
u32 SurfaceType_GetEcho(CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
u32 SurfaceType_GetLightSettingIndex(CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
u16 SurfaceType_GetNumCameras(CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
u32 SurfaceType_GetSceneExitIndex(CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
u16 SurfaceType_GetSfx(CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
u32 SurfaceType_GetSlope(CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
s32 SurfaceType_IsConveyor(CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
u32 SurfaceType_IsHookshotSurface(CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
u32 SurfaceType_IsHorseBlocked(CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
s32 SurfaceType_IsIgnoredByEntities(CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
s32 SurfaceType_IsIgnoredByProjectiles(CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
u32 SurfaceType_IsWallDamage(CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
u32 WaterBox_GetCamDataIndex(CollisionContext* colCtx, WaterBox* waterBox);
u16 WaterBox_GetCameraSType(CollisionContext* colCtx, WaterBox* waterBox);
u32 WaterBox_GetLightSettingIndex(CollisionContext* colCtx, WaterBox* waterBox);
s32 WaterBox_GetSurface1(GlobalContext* globalCtx, CollisionContext* colCtx, f32 x, f32 z, f32* ySurface, WaterBox** outWaterBox);
s32 WaterBox_GetSurface2(GlobalContext* globalCtx, CollisionContext* colCtx, Vec3f* pos, f32 surfaceChkDist, WaterBox** outWaterBox);
s32 WaterBox_GetSurfaceImpl(GlobalContext* globalCtx, CollisionContext* colCtx, f32 x, f32 z, f32* ySurface, WaterBox** outWaterBox);
void func_80038A28(CollisionPoly* poly, f32 tx, f32 ty, f32 tz, MtxF* dest);
void func_8003EBF8(GlobalContext* globalCtx, DynaCollisionContext* dyna, s32 bgId);
void func_8003EC50(GlobalContext* globalCtx, DynaCollisionContext* dyna, s32 bgId);
void func_8003ECA8(GlobalContext* globalCtx, DynaCollisionContext* dyna, s32 bgId);
void func_8003EE6C(GlobalContext* globalCtx, DynaCollisionContext* dyna);
void func_8003F8EC(GlobalContext* globalCtx, DynaCollisionContext* dyna, Actor* actor);
void func_800418D0(CollisionContext* colCtx, GlobalContext* globalCtx);
u16 func_80041A4C(CollisionContext* colCtx, u32 camId, s32 bgId);
Vec3s* func_80041C10(CollisionContext* colCtx, s32 camId, s32 bgId);
u32 func_80041D4C(CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
u32 func_80041D70(CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
s32 func_80041DB8(CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
s32 func_80041DE4(CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
s32 func_80041E18(CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
s32 func_80041E4C(CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
u32 func_80041EA4(CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
u32 func_80041EC8(CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
u32 func_80041F10(CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
s32 func_80042708(CollisionPoly* polyA, CollisionPoly* polyB, Vec3f* point, Vec3f* closestPoint);
s32 func_800427B4(CollisionPoly* polyA, CollisionPoly* polyB, Vec3f* pointA, Vec3f* pointB, Vec3f* closestPoint);
#else
void BgCheck_Allocate(struct CollisionContext* colCtx, struct GlobalContext* globalCtx, struct CollisionHeader* colHeader);
s32 BgCheck_AnyCheckCeiling(struct CollisionContext* colCtx, f32* outY, struct Vec3f* pos, f32 checkHeight);
s32 BgCheck_AnyLineTest1(struct CollisionContext* colCtx, struct Vec3f* posA, struct Vec3f* posB, struct Vec3f* posResult, CollisionPoly** outPoly, s32 chkOneFace);
s32 BgCheck_AnyLineTest2(struct CollisionContext* colCtx, struct Vec3f* posA, struct Vec3f* posB, struct Vec3f* posResult, CollisionPoly** outPoly, s32 chkWall, s32 chkFloor, s32 chkCeil, s32 chkOneFace);
s32 BgCheck_AnyLineTest3(struct CollisionContext* colCtx, struct Vec3f* posA, struct Vec3f* posB, struct Vec3f* posResult, CollisionPoly** outPoly, s32 chkWall, s32 chkFloor, s32 chkCeil, s32 chkOneFace, s32* bgId);
f32 BgCheck_AnyRaycastFloor1(struct CollisionContext* colCtx, CollisionPoly* outPoly, struct Vec3f* pos);
f32 BgCheck_AnyRaycastFloor2(struct CollisionContext* colCtx, CollisionPoly* outPoly, s32* bgId, struct Vec3f* pos);
s32 BgCheck_CameraLineTest1(struct CollisionContext* colCtx, struct Vec3f* posA, struct Vec3f* posB, struct Vec3f* posResult, CollisionPoly** outPoly, s32 chkWall, s32 chkFloor, s32 chkCeil, s32 chkOneFace, s32* bgId);
s32 BgCheck_CameraLineTest2(struct CollisionContext* colCtx, struct Vec3f* posA, struct Vec3f* posB, struct Vec3f* posResult, CollisionPoly** outPoly, s32 chkWall, s32 chkFloor, s32 chkCeil, s32 chkOneFace, s32* bgId);
f32 BgCheck_CameraRaycastFloor2(struct CollisionContext* colCtx, CollisionPoly** outPoly, s32* bgId, struct Vec3f* pos);
s32 BgCheck_CheckDynaCeiling(struct CollisionContext* colCtx, u16 xpFlags, f32* outY, struct Vec3f* pos, f32 chkDist, CollisionPoly** outPoly, s32* outBgId, struct Actor* actor);
s32 BgCheck_CheckLineAgainstDyna(struct CollisionContext* colCtx, u16 xpFlags, struct Vec3f* posA, struct Vec3f* posB, struct Vec3f* posResult, CollisionPoly** outPoly, f32* distSq, s32* outBgId, struct Actor* actor, f32 chkDist, s32 bccFlags);
s32 BgCheck_CheckLineAgainstSSList(struct SSList* headNodeId, struct CollisionContext* colCtx, u16 xpFlags1, u16 xpFlags2, struct Vec3f* posA, struct Vec3f* posB, struct Vec3f* outPos, CollisionPoly** outPoly, f32* outDistSq, f32 chkDist, s32 bccFlags);
s32 BgCheck_CheckLineImpl(struct CollisionContext* colCtx, u16 xpFlags1, u16 xpFlags2, struct Vec3f* posA, struct Vec3f* posB, struct Vec3f* posResult, CollisionPoly** outPoly, s32* bgId, struct Actor* actor, f32 chkDist, u32 bccFlags);
s32 BgCheck_CheckStaticCeiling(struct StaticLookup* lookup, u16 xpFlags, struct CollisionContext* colCtx, f32* outY, struct Vec3f* pos, f32 checkHeight, CollisionPoly** outPoly);
s32 BgCheck_CheckWallImpl(struct CollisionContext* colCtx, u16 xpFlags, struct Vec3f* posResult, struct Vec3f* posNext, struct Vec3f* posPrev, f32 radius, CollisionPoly** outPoly, s32* outBgId, struct Actor* actor, f32 checkHeight, u8 argA);
void BgCheck_DrawDynaCollision(struct GlobalContext*, struct CollisionContext*);
void BgCheck_DrawStaticCollision(struct GlobalContext*, struct CollisionContext*);
s32 BgCheck_EntityCheckCeiling(struct CollisionContext* colCtx, f32* arg1, struct Vec3f* arg2, f32 arg3, CollisionPoly** outPoly, s32* outBgId, struct Actor* actor);
s32 BgCheck_EntityLineTest1(struct CollisionContext* colCtx, struct Vec3f* posA, struct Vec3f* posB, struct Vec3f* posResult, CollisionPoly** outPoly, s32 chkWall, s32 chkFloor, s32 chkCeil, s32 chkOneFace, s32* bgId);
s32 BgCheck_EntityLineTest2(struct CollisionContext* colCtx, struct Vec3f* posA, struct Vec3f* posB, struct Vec3f* posResult, CollisionPoly** outPoly, s32 chkWall, s32 chkFloor, s32 chkCeil, s32 chkOneFace, s32* bgId, struct Actor* actor);
s32 BgCheck_EntityLineTest3(struct CollisionContext* colCtx, struct Vec3f* posA, struct Vec3f* posB, struct Vec3f* posResult, CollisionPoly** outPoly, s32 chkWall, s32 chkFloor, s32 chkCeil, s32 chkOneFace, s32* bgId, struct Actor* actor, f32 chkDist);
f32 BgCheck_EntityRaycastFloor1(struct CollisionContext* colCtx, CollisionPoly** outPoly, struct Vec3f* pos);
f32 BgCheck_EntityRaycastFloor2(struct GlobalContext* globalCtx, struct CollisionContext* colCtx, CollisionPoly** outPoly, struct Vec3f* pos);
f32 BgCheck_EntityRaycastFloor3(struct CollisionContext* colCtx, CollisionPoly** outPoly, s32* bgId, struct Vec3f* pos);
f32 BgCheck_EntityRaycastFloor4(struct CollisionContext* colCtx, CollisionPoly** outPoly, s32* bgId, struct Actor* actor, struct Vec3f* arg4);
f32 BgCheck_EntityRaycastFloor5(struct GlobalContext* globalCtx, struct CollisionContext* colCtx, CollisionPoly** outPoly, s32* bgId, struct Actor* actor, struct Vec3f* pos);
f32 BgCheck_EntityRaycastFloor6(struct CollisionContext* colCtx, CollisionPoly** outPoly, s32* bgId, struct Actor* actor, struct Vec3f* pos, f32 chkDist);
f32 BgCheck_EntityRaycastFloor7(struct CollisionContext* colCtx, CollisionPoly** outPoly, s32* bgId, struct Actor* actor, struct Vec3f* pos);
f32 BgCheck_EntityRaycastFloor8(struct CollisionContext* colCtx, CollisionPoly** outPoly, s32* bgId, struct Actor* actor, struct Vec3f* pos);
f32 BgCheck_EntityRaycastFloor9(struct CollisionContext* colCtx, CollisionPoly** outPoly, s32* bgId, struct Vec3f* pos);
s32 BgCheck_EntitySphVsWall1(struct CollisionContext* colCtx, struct Vec3f* posResult, struct Vec3f* posNext, struct Vec3f* posPrev, f32 radius, CollisionPoly** outPoly, f32 checkHeight);
s32 BgCheck_EntitySphVsWall2(struct CollisionContext* colCtx, struct Vec3f* posResult, struct Vec3f* posNext, struct Vec3f* posPrev, f32 radius, CollisionPoly** outPoly, s32* outBgId, f32 checkHeight);
s32 BgCheck_EntitySphVsWall3(struct CollisionContext* colCtx, struct Vec3f* posResult, struct Vec3f* posNext, struct Vec3f* posPrev, f32 radius, CollisionPoly** outPoly, s32* outBgId, struct Actor* actor, f32 checkHeight);
s32 BgCheck_EntitySphVsWall4(struct CollisionContext* colCtx, struct Vec3f* posResult, struct Vec3f* posNext, struct Vec3f* posPrev, f32 radius, CollisionPoly** outPoly, s32* outBgId, struct Actor* actor, f32 checkHeight);
void BgCheck_GetStaticLookupIndicesFromPos(struct CollisionContext* colCtx, struct Vec3f* pos, struct Vec3i* arg2);
s32 BgCheck_PosInStaticBoundingBox(struct CollisionContext* colCtx, struct Vec3f* pos);
s32 BgCheck_ProjectileLineTest(struct CollisionContext* colCtx, struct Vec3f* posA, struct Vec3f* posB, struct Vec3f* posResult, CollisionPoly** outPoly, s32 chkWall, s32 chkFloor, s32 chkCeil, s32 chkOneFace, s32* bgId);
f32 BgCheck_RaycastFloorDyna(struct DynaRaycast* dynaRaycast);
void BgCheck_ResetPolyCheckTbl(struct SSNodeList* nodeList, s32 numPolys);
s32 BgCheck_SphVsDynaWall(struct CollisionContext* colCtx, u16 xpFlags, f32* outX, f32* outZ, struct Vec3f* pos, f32 radius, CollisionPoly** outPoly, s32* outBgId, struct Actor* actor);
s32 BgCheck_SphVsFirstDynaPoly(struct CollisionContext* colCtx, u16 xpFlags, CollisionPoly** outPoly, s32* outBgId, struct Vec3f* center, f32 radius, struct Actor* actor, u16 bciFlags);
s32 BgCheck_SphVsFirstPoly(struct CollisionContext* colCtx, struct Vec3f* center, f32 radius);
void CollisionHeader_GetVirtual(void* colHeader, struct CollisionHeader** dest);
f32 CollisionPoly_GetPointDistanceFromPlane(CollisionPoly* poly, struct Vec3f* point);
void CollisionPoly_GetVerticesByBgId(CollisionPoly* poly, s32 bgId, struct CollisionContext* colCtx, struct Vec3f* dest);
void DynaPoly_Alloc(struct GlobalContext* globalCtx, struct DynaCollisionContext* dyna);
void DynaPoly_DeleteBgActor(struct GlobalContext* globalCtx, struct DynaCollisionContext* dyna, s32 bgId);
struct DynaPolyActor* DynaPoly_GetActor(struct CollisionContext* colCtx, s32 bgId);
void DynaPoly_Init(struct GlobalContext* globalCtx, struct DynaCollisionContext* dyna);
s32 DynaPoly_IsBgIdBgActor(s32 bgId);
s32 DynaPoly_SetBgActor(struct GlobalContext* globalCtx, struct DynaCollisionContext* dyna, struct Actor* actor, struct CollisionHeader* colHeader);
void DynaPoly_Setup(struct GlobalContext* globalCtx, struct DynaCollisionContext* dyna);
void DynaPoly_UpdateBgActorTransforms(struct GlobalContext* globalCtx, struct DynaCollisionContext* dyna);
u16 DynaSSNodeList_GetNextNodeIdx(struct DynaSSNodeList*);
void SSNodeList_Alloc(struct GlobalContext* globalCtx, struct SSNodeList* this, s32 tblMax, s32 numPolys);
u16 SSNodeList_GetNextNodeIdx(struct SSNodeList* this);
void SSNodeList_Initialize(struct SSNodeList*);
u32 SurfaceType_GetCamDataIndex(struct CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
struct Vec3s* SurfaceType_GetCamPosData(struct CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
u16 SurfaceType_GetCameraSType(struct CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
u32 SurfaceType_GetConveyorDirection(struct CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
u32 SurfaceType_GetConveyorSpeed(struct CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
u32 SurfaceType_GetEcho(struct CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
u32 SurfaceType_GetLightSettingIndex(struct CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
u16 SurfaceType_GetNumCameras(struct CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
u32 SurfaceType_GetSceneExitIndex(struct CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
u16 SurfaceType_GetSfx(struct CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
u32 SurfaceType_GetSlope(struct CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
s32 SurfaceType_IsConveyor(struct CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
u32 SurfaceType_IsHookshotSurface(struct CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
u32 SurfaceType_IsHorseBlocked(struct CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
s32 SurfaceType_IsIgnoredByEntities(struct CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
s32 SurfaceType_IsIgnoredByProjectiles(struct CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
u32 SurfaceType_IsWallDamage(struct CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
u32 WaterBox_GetCamDataIndex(struct CollisionContext* colCtx, struct WaterBox* waterBox);
u16 WaterBox_GetCameraSType(struct CollisionContext* colCtx, struct WaterBox* waterBox);
u32 WaterBox_GetLightSettingIndex(struct CollisionContext* colCtx, struct WaterBox* waterBox);
s32 WaterBox_GetSurface1(struct GlobalContext* globalCtx, struct CollisionContext* colCtx, f32 x, f32 z, f32* ySurface, struct WaterBox** outWaterBox);
s32 WaterBox_GetSurface2(struct GlobalContext* globalCtx, struct CollisionContext* colCtx, struct Vec3f* pos, f32 surfaceChkDist, struct WaterBox** outWaterBox);
s32 WaterBox_GetSurfaceImpl(struct GlobalContext* globalCtx, struct CollisionContext* colCtx, f32 x, f32 z, f32* ySurface, struct WaterBox** outWaterBox);
void func_80038A28(CollisionPoly* poly, f32 tx, f32 ty, f32 tz, MtxF* dest);
void func_8003EBF8(struct GlobalContext* globalCtx, struct DynaCollisionContext* dyna, s32 bgId);
void func_8003EC50(struct GlobalContext* globalCtx, struct DynaCollisionContext* dyna, s32 bgId);
void func_8003ECA8(struct GlobalContext* globalCtx, struct DynaCollisionContext* dyna, s32 bgId);
void func_8003EE6C(struct GlobalContext* globalCtx, struct DynaCollisionContext* dyna);
void func_8003F8EC(struct GlobalContext* globalCtx, struct DynaCollisionContext* dyna, struct Actor* actor);
void func_800418D0(struct CollisionContext* colCtx, struct GlobalContext* globalCtx);
u16 func_80041A4C(struct CollisionContext* colCtx, u32 camId, s32 bgId);
struct Vec3s* func_80041C10(struct CollisionContext* colCtx, s32 camId, s32 bgId);
u32 func_80041D4C(struct CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
u32 func_80041D70(struct CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
s32 func_80041DB8(struct CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
s32 func_80041DE4(struct CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
s32 func_80041E18(struct CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
s32 func_80041E4C(struct CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
u32 func_80041EA4(struct CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
u32 func_80041EC8(struct CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
u32 func_80041F10(struct CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
s32 func_80042708(CollisionPoly* polyA, CollisionPoly* polyB, struct Vec3f* point, struct Vec3f* closestPoint);
s32 func_800427B4(CollisionPoly* polyA, CollisionPoly* polyB, struct Vec3f* pointA, struct Vec3f* pointB, struct Vec3f* closestPoint);
#endif
