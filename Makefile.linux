MAKEFLAGS += --no-builtin-rules

# Build options can either be changed by modifying the makefile, or by building with 'make SETTING=value'

# Instructions:
# install 32bit deps (SDL, freetype, opengl)
# Building GLideN64
# cd in terminal GLideN64/projects/cmake
# execute: cmake -DCMAKE_TOOLCHAIN_FILE=linux_i686.toolchain.cmake  -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Debug -DSDL=1 -DNOHQ=1 ../../src/
# OR
# execute: cmake -DCMAKE_TOOLCHAIN_FILE=linux_i686.toolchain.cmake  -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DSDL=1 -DNOHQ=1 ../../src/
# execute: make
# copy GLideNHQ/GLideNHQd.a and plugin/Debug/GLideN64.so to the external/linux/ folder in the ooot folder
# then for ooot execute: make -f Makefile.linux
# If needed here a hint:
# Compile SDL with: ../configure --build=i686-pc-linux-gnu CFLAGS=-m32 CXXFLAGS=-m32 LDFLAGS=-m32 CC="gcc -m32" CXX="g++ -m32"

PROJECT_DIR := $(dir $(realpath $(firstword $(MAKEFILE_LIST))))

MAKE = make

ifeq ($(OS),Windows_NT)
    DETECTED_OS=windows
else
    UNAME_S := $(shell uname -s)
    ifeq ($(UNAME_S),Linux)
        DETECTED_OS=linux
    endif
    ifeq ($(UNAME_S),Darwin)
        DETECTED_OS=macos
        MAKE=gmake
        CPPFLAGS += -xc++
    endif
endif

#### Tools ####
CC			 		:= gcc
CPP      		:= cpp
STRIP				:= strip

INC        	:= -Iinclude -Isrc -Iassets -Ibuild -I.

OPTFLAGS := -ggdb -fno-omit-frame-pointer -O1 -DFIX_ORIGINAL_UB -DSAFE_MEMORY_ACCESS
OPT_LDFLAGS := -lc -lstdc++ -lgcc
ASFLAGS := -Iinclude -m32
INC       	:= $(INC) -Iexternal/include
CFLAGS 			+= $(INC) -DENABLE_OPENGL -DOS_WINDOWS -DOS_DESKTOP -D_LANGUAGE_C -DUSE_NATIVE_MALLOC -DENABLE_MOUSE -DEARLY= -DNON_MATCHING -m32 -fno-zero-initialized-in-bss -fdata-sections
CFLAGS_EXC	:= -Wno-int-conversion -Wno-int-conversion -Wno-incompatible-pointer-types
CPPFLAGS		:= $(CFLAGS) -fno-rtti

#### Files ####

# ROM image
ELF := ooot.elf
# description of ROM segments
SPEC := spec

SRC_DIRS := $(shell find src -type d)
SRC_PORT_DIRS := $(shell find src/port -type d)
ASSET_BIN_DIRS := $(shell find assets/* -type d -not -path "assets/xml*" -not -path "assets/text")
ASSET_FILES_XML := $(foreach dir,$(ASSET_BIN_DIRS),$(wildcard $(dir)/*.xml))
ASSET_FILES_BIN := $(foreach dir,$(ASSET_BIN_DIRS),$(wildcard $(dir)/*.bin))
ASSET_FILES_OUT := $(foreach f,$(ASSET_FILES_XML:.xml=.c),$f) \
				   $(foreach f,$(ASSET_FILES_BIN:.bin=.bin.inc.c),build/$f) \
				   $(foreach f,$(wildcard assets/text/*.c),build/$(f:.c=.o))

# source files
C_FILES       := $(foreach dir,$(SRC_DIRS) $(ASSET_BIN_DIRS),$(wildcard $(dir)/*.c))

ROM := ooot.z64
ELF := $(ROM:.z64=.elf)

C_FILES       := $(C_FILES) assets/text/fra_message_data_static.c assets/text/ger_message_data_static.c assets/text/nes_message_data_static.c assets/text/staff_message_data_static.c
C_FILES       := $(filter-out src/libultra/io/%.c, $(C_FILES))
C_FILES       := $(filter-out src/libultra/os/%.c, $(C_FILES))
C_FILES       := $(filter-out src/libultra/libc/%.c, $(C_FILES))
C_FILES       := $(filter-out src/boot/idle.c, $(C_FILES))
C_FILES       := $(filter-out src/code/z_cheap_proc.c, $(C_FILES))
C_FILES       := $(filter-out src/code/z_debug_display.c, $(C_FILES))
C_FILES       := $(filter-out src/code/z_camera_data.c, $(C_FILES))
C_FILES       := $(filter-out src/libultra/gu/sqrtf.c, $(C_FILES))
C_FILES       := $(filter-out src/libultra/gu/cosf.c, $(C_FILES))
CPP_FILES     := $(foreach dir,$(SRC_PORT_DIRS) ,$(wildcard $(dir)/*.cpp))
CPP_FILES     := $(filter-out src/port/gfx/%.cpp, $(CPP_FILES))
S_FILES       :=
# Filter out Assets
ASSET_FILES_OUT := $(filter-out build/assets/overlays/ovl_Boss_Dodongo/ovl_Boss_Dodongo.o, $(ASSET_FILES_OUT))
ASSET_FILES_OUT := $(filter-out build/assets/overlays/ovl_Boss_Ganon/ovl_Boss_Ganon.o, $(ASSET_FILES_OUT))
ASSET_FILES_OUT := $(filter-out build/assets/overlays/ovl_File_Choose/ovl_file_choose.o, $(ASSET_FILES_OUT))
ASSET_FILES_OUT := $(filter-out build/assets/code/fbdemo_circle/z_fbdemo_circle.o, $(ASSET_FILES_OUT))
ASSET_FILES_OUT := $(filter-out build/assets/code/fbdemo_wipe1/fbdemo_wipe1.o, $(ASSET_FILES_OUT))
ASSET_FILES_OUT := $(filter-out build/assets/code/fbdemo_wipe1/z_fbdemo_wipe1.o, $(ASSET_FILES_OUT))
ASSET_FILES_OUT := $(filter-out build/assets/code/fbdemo_triforce/z_fbdemo_triforce.o, $(ASSET_FILES_OUT))
C_FILES := $(filter-out assets/overlays/ovl_Boss_Dodongo/ovl_Boss_Dodongo.c, $(C_FILES))
C_FILES := $(filter-out assets/overlays/ovl_Boss_Ganon/ovl_Boss_Ganon.c, $(C_FILES))
C_FILES := $(filter-out assets/overlays/ovl_File_Choose/ovl_file_choose.c, $(C_FILES))
C_FILES := $(filter-out assets/code/fbdemo_circle/z_fbdemo_circle.c, $(C_FILES))
C_FILES := $(filter-out assets/code/fbdemo_wipe1/fbdemo_wipe1.c, $(C_FILES))
C_FILES := $(filter-out assets/code/fbdemo_wipe1/z_fbdemo_wipe1.c, $(C_FILES))
C_FILES := $(filter-out assets/code/fbdemo_triforce/z_fbdemo_triforce.c, $(C_FILES))

O_FILES       := $(foreach f,$(S_FILES:.s=.o),build/$f) \
								$(foreach f,$(C_FILES:.c=.o),build/$f) \
								$(foreach f,$(CPP_FILES:.cpp=.o),build/$f)


# Automatic dependency files
# (Only asm_processor dependencies are handled for now)
DEP_FILES := $(O_FILES:.o=.asmproc.d)

# create build directories
$(shell mkdir -p build/ build/assets/text $(foreach dir,$(SRC_DIRS) $(ASSET_BIN_DIRS),build/$(dir)))

#### Main Targets ###

all: $(ELF)

$(ELF): build/$(ELF)
	$(STRIP) -o build/$(ELF:.elf=) build/$(ELF)

build/$(ELF): $(TEXTURE_FILES_OUT) $(ASSET_FILES_OUT) $(O_FILES)
#	Debug: external/linux/GLideN64.so -lGLideNHQd
#	Release: external/linux/GLideN64.so -lGLideNHQ
	@$(CC) $(O_FILES) -Wl,-Ttools/linux_elf_32.xc -m32  -Wl,-Map=build/oot.map  -o $@ subprojects/gliden64/projects/cmake/plugin/Release/GLideN64.so subprojects/gliden64/projects/cmake/GLideNHQ/libGLideNHQ.a  -Wl,-rpath=/usr/local/lib -g -lpng -lz -lm -lSDL2 $(OPT_LDFLAGS)
	@echo $(CC) -o $@

clean:
	$(RM) -r $(ROM) $(ELF) build

assetclean:
	$(RM) -r $(ASSET_BIN_DIRS)
	$(RM) -r assets/text/*.h
	$(RM) -r build/assets
	$(RM) -r .extracted-assets.json

distclean: clean assetclean
	$(MAKE) -C tools distclean

resources: $(ASSET_FILES_OUT)

.PHONY: all clean setup test distclean assetclean $(ELF)

#### Various Recipes ####

build/assets/text/%.enc.h: assets/text/%.h assets/text/charmap.txt
	python3 tools/msgenc.py assets/text/charmap.txt $< $@

build/assets/text/fra_message_data_static.o: build/assets/text/message_data.enc.h
build/assets/text/ger_message_data_static.o: build/assets/text/message_data.enc.h
build/assets/text/nes_message_data_static.o: build/assets/text/message_data.enc.h
build/assets/text/staff_message_data_static.o: build/assets/text/message_data_staff.enc.h

build/assets/%.o: assets/%.c
	@$(CC) -c $(CFLAGS) $(CFLAGS_EXC) $(OPTFLAGS) -o $@ $<
	@echo $(CC) -o $@ $<

build/src/overlays/%.o: src/overlays/%.c
	@$(CC) -c $(CFLAGS) $(CFLAGS_EXC) $(OPTFLAGS) -o $@ $<
	@echo $(CC) -o $@ $<

build/src/%.o: src/%.c
	$(CC) -std=c11 -c $(CFLAGS) $(CFLAGS_EXC) $(OPTFLAGS) -o $@ $<
	@echo $(CC) -o $@ $<

build/src/%.o: src/%.cpp
	@$(CC) -std=c++17 -c $(CPPFLAGS) $(OPTFLAGS) -o $@ $<
	@echo $(CC) -o $@ $<

-include $(DEP_FILES)
